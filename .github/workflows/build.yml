# based on https://github.com/Arcnor/MiyooCFW/blob/ci/.github/workflows/main.yml
name: Build

# Run on changes (including automated ones from the update job), allow manual triggering from the Actions tab
on: [push, pull_request, workflow_dispatch]

jobs:

  # https://github.com/MiyooCFW/uboot/blob/master/.github/workflows/main.yml
  uboot:
    runs-on: ubuntu-20.04
    container:
      image: miyoocfw/toolchain:master
    steps:
    - uses: actions/checkout@v3
    - run: |
        git submodule update --init --recursive -- uboot
        cd uboot
        make miyoo_pocketgo_defconfig 
        make
        # todo: build with the other defconfigs
    - uses: actions/upload-artifact@v3
      with:
        name: uboot
        path: uboot/u-boot-sunxi-with-spl.bin
        if-no-files-found: error # 'error', 'warn', 'ignore'; defaults to `warn`

  # https://github.com/MiyooCFW/sdcard/blob/master/.github/workflows/build.yml
  boot-scr:
    runs-on: ubuntu-20.04
    container:
      image: miyoocfw/toolchain:master
    steps:
    - uses: actions/checkout@v3
    - run: |
        git submodule update --init --recursive -- sdcard
        cd sdcard
        ./gen_boot_scr.sh
    - uses: actions/upload-artifact@v3
      with:
        name: boot-scr
        path: sdcard/boot # todo: only upload the compiled .scr files instead of the entire boot folder
        if-no-files-found: error # 'error', 'warn', 'ignore'; defaults to `warn`

  # todo: 1-bit sd card variant
  kernel:
    uses: MiyooCFW/kernel/.github/workflows/build.yml@master
    with:
      submodule: kernel
        
  # todo: use buildroot for more than just the rootfs
  buildroot:
    uses: MiyooCFW/buildroot/.github/workflows/rootfs.yml@master
    with:
      submodule: buildroot

  # https://github.com/MiyooCFW/logo/blob/master/.github/workflows/c-cpp.yml
  # todo: bittboy and pocketgo logos
  logo:
    runs-on: ubuntu-20.04
    container:
      image: miyoocfw/toolchain:master
    steps:
    - uses: actions/checkout@v3
    - run: |
        git submodule update --init --recursive -- logo
        cd logo
        make -f Makefile.powkiddy
    - uses: actions/upload-artifact@v3
      with:
        name: boot-logo-powkiddy
        path: logo/boot-logo
        if-no-files-found: error # 'error', 'warn', 'ignore'; defaults to `warn`

  # https://github.com/MiyooCFW/daemon/blob/master/.github/workflows/c-cpp.yml
  daemon:
    runs-on: ubuntu-20.04
    container:
      image: miyoocfw/toolchain:master
    steps:
    - uses: actions/checkout@v3
    - run: |
        git submodule update --init --recursive -- daemon
        cd daemon
        make
    - uses: actions/upload-artifact@v3
      with:
        name: daemon
        path: daemon/daemon
        if-no-files-found: error # 'error', 'warn', 'ignore'; defaults to `warn`
        
  # https://github.com/MiyooCFW/miyooctl/blob/master/.github/workflows/build.yml
  miyooctl:
    uses: MiyooCFW/miyooctl/.github/workflows/build.yml@master
    with:
      submodule: miyooctl

  # https://github.com/MiyooCFW/gmenunx/blob/master/.github/workflows/c-cpp.yml
  gmenunx:
    runs-on: ubuntu-20.04
    container:
      image: miyoocfw/toolchain:master
    steps:
    - uses: actions/checkout@v3
    - run: |
        git submodule update --init --recursive -- gmenunx
        cd gmenunx
        make -f Makefile.miyoo dist
    - uses: actions/upload-artifact@v3
      with:
        name: gmenunx
        path: gmenunx/dist/miyoo/GMenuNX.zip
        if-no-files-found: error # 'error', 'warn', 'ignore'; defaults to `warn`
        
  build-image:
    needs: 
    - uboot
    - boot-scr
    - kernel
    #- buildroot
    - logo
    #- daemon
    - miyooctl
    - gmenunx
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: echo "::set-output name=version::$GITHUB_REF_NAME-$(git rev-parse --short HEAD)" | sed 's#/#-#g'
      id: version
    - run: echo "Version ${{ steps.version.outputs.version }}"
    - uses: actions/download-artifact@v3
    - run: find .
    - name: Replace files under sdcard with the ones we just built
      run: |
        # start with our "sdcard" submodule source, which contains precompiled things and a script
        # to assemble it into an image
        git submodule update --init --recursive -- sdcard
        
        # overwrite some of the precompiled files with the artefacts we just built
        # todo: figure out a good way to differentiate between things we replace and the things we don't
        
        # u-boot binaries and boot.scr commands
        mv uboot/u-boot-sunxi-with-spl.bin sdcard/boot/misc/u-boot-bins/u-boot-v90_q90_pocketgo.bin
        # todo: move other u-boot bins over once they're all compiled
        mv boot-scr/boot.scr sdcard/boot/boot.scr
        mv boot-scr/variants/bittboy2x_v1/boot.scr sdcard/boot/variants/bittboy2x_v1/boot.scr
        mv boot-scr/variants/bittboy2x_v2/boot.scr sdcard/boot/variants/bittboy2x_v2/boot.scr
        mv boot-scr/variants/bittboy3.5/boot.scr sdcard/boot/variants/bittboy3.5/boot.scr
        mv boot-scr/variants/v90_q90/boot.scr sdcard/boot/variants/v90_q90/boot.scr
        mv boot-scr/variants/m3/boot.scr sdcard/boot/variants/m3/boot.scr
        mv boot-scr/variants/xyc/boot.scr sdcard/boot/variants/xyc/boot.scr
        
        # everything currently shares the same devicetree file, 
        # instead uses different kernel builds to handle different keyboards ðŸ¤·
        # (aside from the display panel and input configuration, the rest of the 
        # hardware is pretty similar. The panel is a random mix-n-match.)
        mv kernel\ \(uClibc\)/suniv-f1c500s-miyoo.dtb sdcard/boot/ 
        
        # kernel
        mv kernel\ \(uClibc\)/zImage sdcard/boot/
        mv kernel\ \(uClibc\)/*.ko sdcard/boot/
        
        # currently linux can't boot if we use the rootfs that we build
        # once we fix the video issues, this should hopefully be easier to debug
        #mv rootfs.tar.xz/rootfs.tar.xz sdcard/rootfs.tar.xz
        
        # todo: get these files for the other variangs
        mv boot-logo-powkiddy/boot-logo sdcard/boot/variants/v90_q90/
        mv miyooctl/miyooctl sdcard/boot/variants/v90_q90/miyooctl2
        
        # disabled because it seems to break the keyboard
        #mv daemon/daemon sdcard/boot/variants/v90_q90/
        
        unzip -o gmenunx/GMenuNX.zip -d sdcard/main/

    - run: find .
    
    # https://github.com/MiyooCFW/sdcard/blob/master/.github/workflows/build.yml
    - name: Build image
      run: |
          cd sdcard
          sudo VERSION=${{ steps.version.outputs.version }} ./generate_image_file.sh
    - uses: actions/upload-artifact@v3
      with:
        name: "cfw-${{ steps.version.outputs.version }}.img"
        path: sdcard/cfw-*.img
        if-no-files-found: error # 'error', 'warn', 'ignore'; defaults to `warn`
